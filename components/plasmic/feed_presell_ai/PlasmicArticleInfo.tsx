// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9u4jBEkqWUKrrXSfUUFFfk
// Component: 2LavSKTrjq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: 9R13-owMVa/codeComponent

import { useScreenVariants as useScreenVariantsgpwde9M3Mng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GPWDE9_m3Mng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";


import projectcss from "./plasmic_feed_presell_ai.module.css"; // plasmic-import: 9u4jBEkqWUKrrXSfUUFFfk/projectcss
import sty from "./PlasmicArticleInfo.module.css"; // plasmic-import: 2LavSKTrjq/css


import ReactHtmlParser from 'react-html-parser';









export type PlasmicArticleInfo__VariantMembers = {};
export type PlasmicArticleInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticleInfo__VariantsArgs;
export const PlasmicArticleInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicArticleInfo__ArgsType = {};
type ArgPropType = keyof PlasmicArticleInfo__ArgsType;
export const PlasmicArticleInfo__ArgProps = new Array<ArgPropType>();

export type PlasmicArticleInfo__OverridesType = {
  root?: p.Flex<"div">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  heroSubHeadline?: p.Flex<"div">;
  heroImage?: p.Flex<typeof p.PlasmicImg>;
  paragraph1?: p.Flex<"div">;
  image1?: p.Flex<typeof p.PlasmicImg>;
  paragraph2?: p.Flex<"div">;
  image2?: p.Flex<typeof p.PlasmicImg>;
  paragraph3?: p.Flex<"div">;
  image3?: p.Flex<typeof p.PlasmicImg>;
  paragraph4?: p.Flex<"div">;
  image4?: p.Flex<typeof p.PlasmicImg>;
  paragraph5?: p.Flex<"div">;
  image5?: p.Flex<typeof p.PlasmicImg>;
  paragraph6?: p.Flex<"div">;
  image6?: p.Flex<typeof p.PlasmicImg>;
  paragraph7?: p.Flex<"div">;
  divlpPomBox135?: p.Flex<"div">;
  divlpPomText136?: p.Flex<"div">;
  clickHereToLearnMoreOrderSparqZeroToday?: p.Flex<"div">;
  divlpPomText137?: p.Flex<"div">;
  fastSameDayShipping?: p.Flex<"div">;
  alpPomButton138?: p.Flex<"a"> & Partial<LinkProps>;
  claimFreePods?: p.Flex<"div">;
  divlpPomBox139?: p.Flex<"div">;
  _100000HappyCustomersInStockShipsNow?: p.Flex<"div">;
  div?: p.Flex<"div">;
  _4E8Df8335StarReviews103N00Q000000000000028Png?: p.Flex<"div">;
  image7?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultArticleInfoProps { }

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicArticleInfo__RenderFunc(props: {
  variants: PlasmicArticleInfo__VariantsArgs;
  args: PlasmicArticleInfo__ArgsType;
  overrides: PlasmicArticleInfo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgpwde9M3Mng()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
        .plasmic_feed_presell_ai_all__rRTbn.PlasmicArticleInfo_freeBox__t0XxM__i4vV6 {
          margin-left: 60px;
      }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
          id={(() => {
            try {
              // console.log("**** Line 154 **** "+$ctx.params.slug);
              return $ctx.params.slug;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" +
                  "'" +
                  $ctx.params.slug +
                  "'"
                );
              } catch (e) {
                if (e instanceof TypeError) {
                  return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <PlasmicHead
                    className={classNames("__wab_instance", sty.head___2TJbn)}
                    description={(() => {
                      try {
                        // console.log("**** all Dyanamic Data array Line  207 ***");
                        // console.log($ctx.fetchDyanamicData); 
                        return $ctx.fetchDyanamicData.records[0].fields[
                          "Step 1 SEO Description"
                        ];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    title={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields[
                          "Step 1 SEO Title"
                        ];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kX152)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3Hkyi)}
                        displayHeight={"56px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.fields.logo[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Svqf
                        )}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.columns__um87Q)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__lnI4
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___7Jrko
                            )}
                            component={Link}
                            href={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields[
                                  "Step 2 URL"
                                ];
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            platform={"nextjs"}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__bmaGl)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"266px" as const}
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.logo[0].url;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            ) : null}
                          </p.PlasmicLink>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qZwpR
                          )}
                        />
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eiUyg)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__xMkj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__rA1Hw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gWvpK
                              )}
                            >
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.aSlogan;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return '"The Evaluation of Inhalation"';
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ekYKj
                            )}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__qFsy
                              )}
                              component={Link}
                              href={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields["Step 2 URL"];
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___72MUb)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("500px" as const)
                                    : ("266px" as const)
                                }
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.logo[0].url;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </p.PlasmicLink>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__c4A2J
                            )}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__sn8Lk
                              )}
                              component={Link}
                              href={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields["Step 2 URL"];
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              platform={"nextjs"}
                            >
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.aCTA;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "CLAIM FREE PODS";
                                  }
                                  throw e;
                                }
                              })()}
                            </p.PlasmicLink>
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__t0XxM)}
                  >
                    <div
                      data-plasmic-name={"heroSubHeadline"}
                      data-plasmic-override={overrides.heroSubHeadline}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heroSubHeadline
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .heroHeadline;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      ) : (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {

                                return $ctx.fetchDyanamicData.records[0].fields
                                  .heroHeadline;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      )}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vLfi6
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .heroSubHeadline;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()
                      ) : (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                // console.log("*** Line 577  ***"+$ctx.fetchDyanamicData.records[0].fields
                                // .heroSubHeadline);
                                var ParaSbText = $ctx.fetchDyanamicData.records[0].fields.heroSubHeadline;
                                var html = urlScheck(ParaSbText); 
                             
                                function urlScheck(text) {
                                  var regex = /\[([^\][]*)]/g;
                                  var results = [], m;
                                  while (m = regex.exec(text)) {
                                    results.push(m[1]);         
                                  }
                                    const replaceData = results;

                                    var arrayLength = replaceData.length;
                                    var  asas= 0;
                                    for (var i=0; i <= arrayLength; i++) {
                                    
                                   var urlRegSB = /(https?:\/\/[^\s]+)/g;
                                   return text.replace(+ replaceData + '').replace(urlRegSB, function (url) {
                                   var laststringremove = url.replaceAll(")", "")
                                     
                                  
                                    var onlyurl =  '<a href="' + laststringremove + '" style="color:#4896fa;text-decoration: underline #4896FA 1px;">' + replaceData[asas] + '</a>';
                                    asas ++ ;
                                   
                                    return onlyurl;
                                  })
                                }
                              }
                             
                        const cleanedParagraph = html.replace(/\[(.*?.)\]/g, '');
                                
                        const cleanedParagraph21  = cleanedParagraph.replace('(', '<span>').replace('(', '</span>');
                        console.log(cleanedParagraph21)
                        const cleanedParagraphhh  = cleanedParagraph21.replace('(', '<span>').replace('(', '</span>');
                        return cleanedParagraphhh;

                       
 
       
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }

                            })()
                          }}
                        />
                      )}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__kMX
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"heroImage"}
                        data-plasmic-override={overrides.heroImage}
                        alt={""}
                        className={classNames(sty.heroImage)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0]
                                  .fields.heroImage[0].url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                            : (() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0]
                                  .fields.heroImage[0].url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        }
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph1"}
                      data-plasmic-override={overrides.paragraph1}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                          try {
                            return $ctx.fetchDyanamicData.fields.paragraph1;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()
                        : (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .paragraph1;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__z6Y0
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image1"}
                        data-plasmic-override={overrides.image1}
                        alt={""}
                        className={classNames(sty.image1)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0]
                                  .fields.image1[0].url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                            : (() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0]
                                  .fields.image1[0].url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        }
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph2"}
                      data-plasmic-override={overrides.paragraph2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .paragraph2;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()
                        : (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .paragraph2;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__atTjL
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image2"}
                        data-plasmic-override={overrides.image2}
                        alt={""}
                        className={classNames(sty.image2)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("300px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image2[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph3"}
                      data-plasmic-override={overrides.paragraph3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph3
                      )}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .paragraph3;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__znWI
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image3"}
                        data-plasmic-override={overrides.image3}
                        alt={""}
                        className={classNames(sty.image3)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image3[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph4"}
                      data-plasmic-override={overrides.paragraph4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph4
                      )}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .paragraph4;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__xYrZl
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image4"}
                        data-plasmic-override={overrides.image4}
                        alt={""}
                        className={classNames(sty.image4)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image4[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph5"}
                      data-plasmic-override={overrides.paragraph5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph5
                      )}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .paragraph5;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ps6YD
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image5"}
                        data-plasmic-override={overrides.image5}
                        alt={""}
                        className={classNames(sty.image5)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image5[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph6"}
                      data-plasmic-override={overrides.paragraph6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph6
                      )}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .paragraph6;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    <PlasmicHead
                      className={classNames("__wab_instance", sty.head__kJ2Xe)}
                    />

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__qWpr0
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image6"}
                        data-plasmic-override={overrides.image6}
                        alt={""}
                        className={classNames(sty.image6)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("400px" as const)
                            : ("400px" as const)
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image6[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>

                    <div
                      data-plasmic-name={"paragraph7"}
                      data-plasmic-override={overrides.paragraph7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.paragraph7
                      )}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .paragraph7;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iyJs
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            data-plasmic-name={"divlpPomBox135"}
                            data-plasmic-override={overrides.divlpPomBox135}
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomBox135
                            )}
                          >
                            <div
                              data-plasmic-name={"divlpPomText136"}
                              data-plasmic-override={overrides.divlpPomText136}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomText136
                              )}
                            >
                              <div
                                data-plasmic-name={
                                  "clickHereToLearnMoreOrderSparqZeroToday"
                                }
                                data-plasmic-override={
                                  overrides.clickHereToLearnMoreOrderSparqZeroToday
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.clickHereToLearnMoreOrderSparqZeroToday
                                )}
                              >
                                <p.PlasmicLink
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    projectcss.__wab_text,
                                    sty.link___0LmMp
                                  )}
                                  component={Link}
                                  href={(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields["Step 2 URL"];
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  platform={"nextjs"}
                                >
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.aOutroH1;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Click Here To Learn More & Order Sparq Zero® Today!";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </p.PlasmicLink>
                              </div>
                            </div>

                            <div
                              data-plasmic-name={"divlpPomText137"}
                              data-plasmic-override={overrides.divlpPomText137}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomText137
                              )}
                            >
                              <div
                                data-plasmic-name={"fastSameDayShipping"}
                                data-plasmic-override={
                                  overrides.fastSameDayShipping
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.fastSameDayShipping
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__o3N39
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.aOutroH2;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Fast Same-Day Shipping";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              </div>
                            </div>

                            <p.PlasmicLink
                              data-plasmic-name={"alpPomButton138"}
                              data-plasmic-override={overrides.alpPomButton138}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.alpPomButton138
                              )}
                              component={Link}
                              href={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields["Step 2 URL"];
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              platform={"nextjs"}
                            >
                              <div
                                data-plasmic-name={"claimFreePods"}
                                data-plasmic-override={overrides.claimFreePods}
                                className={classNames(
                                  projectcss.all,
                                  sty.claimFreePods
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zNhx
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.aCTA;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "CLAIM FREE PODS 👉";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              </div>
                            </p.PlasmicLink>

                            <div
                              data-plasmic-name={"divlpPomBox139"}
                              data-plasmic-override={overrides.divlpPomBox139}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomBox139
                              )}
                            />

                            <div
                              data-plasmic-name={
                                "_100000HappyCustomersInStockShipsNow"
                              }
                              data-plasmic-override={
                                overrides._100000HappyCustomersInStockShipsNow
                              }
                              className={classNames(
                                projectcss.all,
                                sty._100000HappyCustomersInStockShipsNow
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4UCxj
                                )}
                              >
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.aOutroH3;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "100,000+ Happy Customers! In Stock - Ships Now.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </div>
                            </div>

                            <div
                              data-plasmic-name={"div"}
                              data-plasmic-override={overrides.div}
                              className={classNames(projectcss.all, sty.div)}
                            >
                              <div
                                data-plasmic-name={
                                  "_4E8Df8335StarReviews103N00Q000000000000028Png"
                                }
                                data-plasmic-override={
                                  overrides._4E8Df8335StarReviews103N00Q000000000000028Png
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty._4E8Df8335StarReviews103N00Q000000000000028Png
                                )}
                              />
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__lntat
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields[
                              "Step 2 URL"
                            ];
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                      >
                        {(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .aOutroH1;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Click Here To Learn More & Order Sparq Zero® Today!";
                            }
                            throw e;
                          }
                        })()}
                      </p.PlasmicLink>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__ogQ80
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .aOutroH2;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Fast Same-Day Shipping";
                            }
                            throw e;
                          }
                        })()}
                      </p.PlasmicLink>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jQkx7
                        )}
                      >
                        {(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .aOutroH3;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "100,000+ Happy Customers! In Stock - Ships Now.";
                            }
                            throw e;
                          }
                        })()}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___4HXuc)}
                        displayHeight={"21px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"112px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/feed_presell_ai/images/_4E8Df8335StarReviews107A01G000000000000028Png.png",
                          fullWidth: 262,
                          fullHeight: 52,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__yX9KC
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields[
                              "Step 2 URL"
                            ];
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                      >
                        {(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .aCTA;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "CLAIM FREE PODS 👉";
                            }
                            throw e;
                          }
                        })()}
                      </p.PlasmicLink>
                    ) : null}

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__emJw0
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields[
                            "Step 2 URL"
                          ];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"image7"}
                        data-plasmic-override={overrides.image7}
                        alt={""}
                        className={classNames(sty.image7)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={"400px" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("354px" as const)
                            : ("750px" as const)
                        }
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .image7[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.PlasmicLink>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kUzNs)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__lRlcp
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__ykYIw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___8Xmd1
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__tli1L
                                    )}
                                  />
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__xm0Yd
                                    )}
                                  />
                                ) : null}
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__wvvO5
                              )}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__irRgs
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__cQPe4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___0Menr
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__jGp2P
                                    )}
                                  />
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__sffYy
                                    )}
                                  />
                                ) : null}
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__yfapz
                              )}
                            />
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__v4Y1J
                              )}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___7SEqV
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__xGtwc
                              )}
                            />
                          ) : null}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eopBj
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qMx9Q
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hS6RL
                                )}
                              >
                                {"“Small Hero Quote Here”"}
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lrEg0
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  sty.link__cmcpk
                                )}
                                component={Link}
                                href={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields["Step 2 URL"];
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                platform={"nextjs"}
                              >
                                {"Claim Special Offer"}
                              </p.PlasmicLink>
                            ) : null}
                          </div>
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o3FXp)}
                    />
                  ) : null}

                  <PlasmicHead
                    className={classNames("__wab_instance", sty.head__qQEd1)}
                    description={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields.paragraph1;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    title={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields.heroHeadline;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__oy9IU)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__pmkXc
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__wSaym
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields[
                              "Step 2 URL"
                            ];
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___0Zho)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("266px" as const)
                              : ("266px" as const)
                          }
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .logo[0].url;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </p.PlasmicLink>
                    </p.PlasmicLink>
                  </div>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpApiFetcher",
    "heroSubHeadline",
    "heroImage",
    "paragraph1",
    "image1",
    "paragraph2",
    "image2",
    "paragraph3",
    "image3",
    "paragraph4",
    "image4",
    "paragraph5",
    "image5",
    "paragraph6",
    "image6",
    "paragraph7",
    "divlpPomBox135",
    "divlpPomText136",
    "clickHereToLearnMoreOrderSparqZeroToday",
    "divlpPomText137",
    "fastSameDayShipping",
    "alpPomButton138",
    "claimFreePods",
    "divlpPomBox139",
    "_100000HappyCustomersInStockShipsNow",
    "div",
    "_4E8Df8335StarReviews103N00Q000000000000028Png",
    "image7"
  ],
  httpApiFetcher: [
    "httpApiFetcher",
    "heroSubHeadline",
    "heroImage",
    "paragraph1",
    "image1",
    "paragraph2",
    "image2",
    "paragraph3",
    "image3",
    "paragraph4",
    "image4",
    "paragraph5",
    "image5",
    "paragraph6",
    "image6",
    "paragraph7",
    "divlpPomBox135",
    "divlpPomText136",
    "clickHereToLearnMoreOrderSparqZeroToday",
    "divlpPomText137",
    "fastSameDayShipping",
    "alpPomButton138",
    "claimFreePods",
    "divlpPomBox139",
    "_100000HappyCustomersInStockShipsNow",
    "div",
    "_4E8Df8335StarReviews103N00Q000000000000028Png",
    "image7"
  ],
  heroSubHeadline: ["heroSubHeadline"],
  heroImage: ["heroImage"],
  paragraph1: ["paragraph1"],
  image1: ["image1"],
  paragraph2: ["paragraph2"],
  image2: ["image2"],
  paragraph3: ["paragraph3"],
  image3: ["image3"],
  paragraph4: ["paragraph4"],
  image4: ["image4"],
  paragraph5: ["paragraph5"],
  image5: ["image5"],
  paragraph6: ["paragraph6"],
  image6: ["image6"],
  paragraph7: ["paragraph7"],
  divlpPomBox135: [
    "divlpPomBox135",
    "divlpPomText136",
    "clickHereToLearnMoreOrderSparqZeroToday",
    "divlpPomText137",
    "fastSameDayShipping",
    "alpPomButton138",
    "claimFreePods",
    "divlpPomBox139",
    "_100000HappyCustomersInStockShipsNow",
    "div",
    "_4E8Df8335StarReviews103N00Q000000000000028Png"
  ],
  divlpPomText136: [
    "divlpPomText136",
    "clickHereToLearnMoreOrderSparqZeroToday"
  ],
  clickHereToLearnMoreOrderSparqZeroToday: [
    "clickHereToLearnMoreOrderSparqZeroToday"
  ],
  divlpPomText137: ["divlpPomText137", "fastSameDayShipping"],
  fastSameDayShipping: ["fastSameDayShipping"],
  alpPomButton138: ["alpPomButton138", "claimFreePods"],
  claimFreePods: ["claimFreePods"],
  divlpPomBox139: ["divlpPomBox139"],
  _100000HappyCustomersInStockShipsNow: [
    "_100000HappyCustomersInStockShipsNow"
  ],
  div: ["div", "_4E8Df8335StarReviews103N00Q000000000000028Png"],
  _4E8Df8335StarReviews103N00Q000000000000028Png: [
    "_4E8Df8335StarReviews103N00Q000000000000028Png"
  ],
  image7: ["image7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpApiFetcher: typeof DataFetcher;
  heroSubHeadline: "div";
  heroImage: typeof p.PlasmicImg;
  paragraph1: "div";
  image1: typeof p.PlasmicImg;
  paragraph2: "div";
  image2: typeof p.PlasmicImg;
  paragraph3: "div";
  image3: typeof p.PlasmicImg;
  paragraph4: "div";
  image4: typeof p.PlasmicImg;
  paragraph5: "div";
  image5: typeof p.PlasmicImg;
  paragraph6: "div";
  image6: typeof p.PlasmicImg;
  paragraph7: "div";
  divlpPomBox135: "div";
  divlpPomText136: "div";
  clickHereToLearnMoreOrderSparqZeroToday: "div";
  divlpPomText137: "div";
  fastSameDayShipping: "div";
  alpPomButton138: "a";
  claimFreePods: "div";
  divlpPomBox139: "div";
  _100000HappyCustomersInStockShipsNow: "div";
  div: "div";
  _4E8Df8335StarReviews103N00Q000000000000028Png: "div";
  image7: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleInfo__VariantsArgs;
    args?: PlasmicArticleInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticleInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
    PlasmicArticleInfo__ArgsType,
    ReservedPropsType
  > &
    /* Specify overrides for each element directly as props*/ Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
    /* Specify props for the root element*/ Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticleInfo__ArgProps,
          internalVariantPropNames: PlasmicArticleInfo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicArticleInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleInfo";
  } else {
    func.displayName = `PlasmicArticleInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleInfo = Object.assign(
  // Top-level PlasmicArticleInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    heroImage: makeNodeComponent("heroImage"),
    paragraph1: makeNodeComponent("paragraph1"),
    image1: makeNodeComponent("image1"),
    paragraph2: makeNodeComponent("paragraph2"),
    image2: makeNodeComponent("image2"),
    paragraph3: makeNodeComponent("paragraph3"),
    image3: makeNodeComponent("image3"),
    paragraph4: makeNodeComponent("paragraph4"),
    image4: makeNodeComponent("image4"),
    paragraph5: makeNodeComponent("paragraph5"),
    image5: makeNodeComponent("image5"),
    paragraph6: makeNodeComponent("paragraph6"),
    image6: makeNodeComponent("image6"),
    paragraph7: makeNodeComponent("paragraph7"),
    divlpPomBox135: makeNodeComponent("divlpPomBox135"),
    divlpPomText136: makeNodeComponent("divlpPomText136"),
    clickHereToLearnMoreOrderSparqZeroToday: makeNodeComponent(
      "clickHereToLearnMoreOrderSparqZeroToday"
    ),
    divlpPomText137: makeNodeComponent("divlpPomText137"),
    fastSameDayShipping: makeNodeComponent("fastSameDayShipping"),
    alpPomButton138: makeNodeComponent("alpPomButton138"),
    claimFreePods: makeNodeComponent("claimFreePods"),
    divlpPomBox139: makeNodeComponent("divlpPomBox139"),
    _100000HappyCustomersInStockShipsNow: makeNodeComponent(
      "_100000HappyCustomersInStockShipsNow"
    ),
    div: makeNodeComponent("div"),
    _4E8Df8335StarReviews103N00Q000000000000028Png: makeNodeComponent(
      "_4E8Df8335StarReviews103N00Q000000000000028Png"
    ),
    image7: makeNodeComponent("image7"),

    // Metadata about props expected for PlasmicArticleInfo
    internalVariantProps: PlasmicArticleInfo__VariantProps,
    internalArgProps: PlasmicArticleInfo__ArgProps,

    // Key-value metadata
    metadata: { title: "Meet The Newest Flavor Diffuser" },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicArticleInfo;
/* prettier-ignore-end */
