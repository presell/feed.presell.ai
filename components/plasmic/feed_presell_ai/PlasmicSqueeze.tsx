// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9u4jBEkqWUKrrXSfUUFFfk
// Component: VYTD6jD3PVG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: oXgnbMzjmEb/component
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: 9R13-owMVa/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_feed_presell_ai.module.css"; // plasmic-import: 9u4jBEkqWUKrrXSfUUFFfk/projectcss
import sty from "./PlasmicSqueeze.module.css"; // plasmic-import: VYTD6jD3PVG/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: mLLNiYFIAvU/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LM5WZ4deOJj/icon

export type PlasmicSqueeze__VariantMembers = {};
export type PlasmicSqueeze__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueeze__VariantsArgs;
export const PlasmicSqueeze__VariantProps = new Array<VariantPropType>();

export type PlasmicSqueeze__ArgsType = {};
type ArgPropType = keyof PlasmicSqueeze__ArgsType;
export const PlasmicSqueeze__ArgProps = new Array<ArgPropType>();

export type PlasmicSqueeze__OverridesType = {
  root?: p.Flex<"div">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  freeBox?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  button?: p.Flex<"button">;
  head?: p.Flex<typeof PlasmicHead>;
};

export interface DefaultSqueezeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSqueeze__RenderFunc(props: {
  variants: PlasmicSqueeze__VariantsArgs;
  args: PlasmicSqueeze__ArgsType;
  overrides: PlasmicSqueeze__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSqueeze.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSqueeze.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSqueeze.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
          id={(() => {
            try {
              return $ctx.params.slug;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS/" +
                  $ctx.params.slug
                );
              } catch (e) {
                if (e instanceof TypeError) {
                  return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?slug";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  {true ? (
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__aA2H)}
                        displayHeight={"56px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.fetchDyanamicData.fields.logo[0].url;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  ) : null}

                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__aCdPz)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__lDnBi)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iqZnN
                        )}
                      >
                        {"Enter some text"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xOevu
                        )}
                      >
                        {"Enter some text"}
                      </div>

                      <TextInput
                        className={classNames(
                          "__wab_instance",
                          sty.textInput___83TV
                        )}
                      />

                      <TextInput
                        className={classNames(
                          "__wab_instance",
                          sty.textInput__sA0O
                        )}
                      />

                      <button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button
                        )}
                      >
                        {"Click Me"}
                      </button>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__bfBay)}
                    />
                  </div>

                  <PlasmicHead
                    data-plasmic-name={"head"}
                    data-plasmic-override={overrides.head}
                    className={classNames("__wab_instance", sty.head)}
                    description={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields.paragraph1;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    title={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields.heroHeadline;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpApiFetcher", "freeBox", "columns", "button", "head"],
  httpApiFetcher: ["httpApiFetcher", "freeBox", "columns", "button", "head"],
  freeBox: ["freeBox"],
  columns: ["columns", "button"],
  button: ["button"],
  head: ["head"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpApiFetcher: typeof DataFetcher;
  freeBox: "div";
  columns: "div";
  button: "button";
  head: typeof PlasmicHead;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueeze__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueeze__VariantsArgs;
    args?: PlasmicSqueeze__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueeze__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueeze__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSqueeze__ArgProps,
          internalVariantPropNames: PlasmicSqueeze__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSqueeze__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueeze";
  } else {
    func.displayName = `PlasmicSqueeze.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueeze = Object.assign(
  // Top-level PlasmicSqueeze renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    columns: makeNodeComponent("columns"),
    button: makeNodeComponent("button"),
    head: makeNodeComponent("head"),

    // Metadata about props expected for PlasmicSqueeze
    internalVariantProps: PlasmicSqueeze__VariantProps,
    internalArgProps: PlasmicSqueeze__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Squeeze",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSqueeze;
/* prettier-ignore-end */
